var SongModel = Backbone.Model.extend({
    url: function() {
        var a = Backbone.Model.prototype.url.call(this);
        return a + (a.charAt(a.length - 1) == "/" ? "" : "/");
    },
    defaults: {
        artist: "Unknown",
        title: "Untitled",
        songFile: "",
        isUserFav: false,
        totalFav: 0,
        songOrder: 1
    },
    onSync: function(a, b, c) {
        this.set("totalFav", b.total_fav);
    },
    initialize: function() {
        this.urlRoot = "/mix/" + this.attributes.mixId + "/song/";
        this.listenTo(this, "sync", this.onSync);
    }
});

var SongsCollection = Backbone.Collection.extend({
    model: SongModel,
    url: "",
    comparator: function(a) {
        return a.get("songOrder");
    },
    updateSongOrder: function() {
        Backbone.sync("update", this, {});
    }
});

var MixModel = Backbone.Model.extend({
    urlRoot: "/mix",
    url: function() {
        var a = Backbone.Model.prototype.url.call(this);
        return a + (a.charAt(a.length - 1) == "/" ? "" : "/");
    },
    defaults: {
        title: "Mix Title",
        username: "Dude",
        isUserMix: false,
        pictureFile: "",
        songs: [],
        comments: []
    },
    initialize: function() {
        this.songs = new SongsCollection(this.attributes.songs);
        this.songs.url = this.url() + "update_song_order/";
        this.comments = new CommentsCollection();
        this.comments.url = this.url() + "comments/";
        this.comments.fetch();
    }
});

var CommentModel = Backbone.Model.extend({
    url: function() {
        var a = Backbone.Model.prototype.url.call(this);
        return a + (a.charAt(a.length - 1) == "/" ? "" : "/");
    },
    defaults: {
        date: false,
        text: "",
        username: ""
    },
    onSync: function(a, b, c) {},
    initialize: function() {
        this.urlRoot = "/mix/" + this.attributes.mixId + "/comment/";
    }
});

var CommentsCollection = Backbone.Collection.extend({
    model: CommentModel,
    url: "/comments",
    comparator: function(a) {
        return a.get("date");
    },
    parse: function(a) {
        return a.comments;
    }
});

var MixView = Backbone.View.extend({
    isPublished: true,
    isSorting: false,
    currentPlayingSong: false,
    initialize: function() {
        this.listenTo(this.model, "change:title", this.onChange);
        this.listenTo(this.model, "change:pictureFile", this.renderPictureFile);
        this.listenTo(this.model, "change:isPublished", this.renderPublished);
        this.songs = new SongCollectionView({
            collection: this.model.songs,
            el: $(".song-list", this.el)[0]
        });
        this.comments = new CommentCollectionView({
            collection: this.model.comments,
            el: $("#commentsList")[0]
        });
    },
    playSong: function(a, b) {
        if (!a) return;
        if (this.currentPlayingSong != a) {
            this.songStopHandler();
        }
        this.currentPlayingSong = a;
        $("#song_" + this.currentPlayingSong.id).addClass("playing");
        EventDispatcher.dispatchEvent("songPlay", {
            song: this.currentPlayingSong,
            autoPlay: b
        });
    },
    songStopHandler: function() {
        $("#song_" + this.currentPlayingSong.id).removeClass("playing");
        this.currentPlayingSong = false;
    },
    songEndedHandler: function() {
        this.playNextSong();
    },
    playNextSong: function() {
        if (!this.currentPlayingSong) return;
        var a = this.songs.collection.findWhere({
            songOrder: this.currentPlayingSong.attributes.songOrder + 1
        });
        if (a) {
            this.playSong(a);
        }
    },
    onChange: function(a, b) {
        this.model.save(this.model.changed, {
            patch: true
        });
    },
    setPublished: function() {
        if (this.isPublished) return;
        var a = this;
        $("body").removeClass("unpublished");
        $("#mixTitle").editable("destroy").off("save");
        this.songs.$el.off("click", ".song-delete");
        $(".song-title").editable("destroy").off("save");
        $(".song-artist").editable("destroy").off("save");
        $("#removeBG").off("click");
        $("#publishMixLink").off("click");
        this.songs.$el.sortable("destroy");
        $("#songUploader").pluploadQueue().destroy();
        $("#songUploader").unbind();
        $("#uploadSongForm").unbind();
        $("#picUploader").pluploadQueue().destroy();
        $("#picUploader").unbind();
        $("#uploadPictureForm").unbind();
        this.options.isPublished = this.isPublished = true;
    },
    setUnpublished: function() {
        if (!this.isPublished) return;
        var a = this;
        $("body").addClass("unpublished");
        $("#mixTitle").editable({
            type: "text",
            showbuttons: false,
            title: "Enter title",
            inputclass: "mix-title",
            unsavedclass: null
        }).on("save", function(b, c) {
            a.model.set("title", c.newValue);
        });
        $(".song-title").editable({
            type: "text",
            showbuttons: false,
            title: "Song title",
            toggle: "dblclick",
            unsavedclass: null
        }).on("save", function(b, c) {
            a.songs.editSong($(this).attr("data-id"), "title", c.newValue);
        });
        $(".song-artist").editable({
            type: "text",
            showbuttons: false,
            title: "Song artist",
            toggle: "dblclick"
        }).on("save", function(b, c) {
            a.songs.editSong($(this).attr("data-id"), "artist", c.newValue);
            $(this).removeClass("editable-unsaved");
        });
        this.songs.$el.on("click", ".song-delete", function() {
            $item = $(this).parent();
            var b = a.songs.collection.get($item.attr("id").replace("song_", ""));
            if (confirm("Are you sure you want to delete " + b.attributes.title + " by " + b.attributes.artist + "?")) {
                b.destroy();
            }
        });
        $("#removeBG").on("click", function() {
            a.model.set("pictureFile", "");
            a.model.save(a.model.changed, {
                patch: true
            });
        });
        $("#publishMixLink").on("click", function() {
            Modal.open("/static/html/modal/publish-email.html", function() {
                switch ($(this).html()) {
                  case "Yes":
                    a.model.set("isPublished", true);
                    a.model.changed.sendEmail = true;
                    a.model.save(a.model.changed, {
                        patch: true
                    });
                    break;

                  case "No":
                    a.model.set("isPublished", true);
                    a.model.save(a.model.changed, {
                        patch: true
                    });
                    break;
                }
                Modal.close();
            });
            return;
        });
        this.songs.$el.sortable({
            start: function() {
                a.isSorting = true;
            },
            stop: function() {
                setTimeout(function() {
                    a.isSorting = false;
                }, 0);
            },
            update: function(b, c) {
                a.songs.reorderSongs();
            }
        });
        $("#songUploader").pluploadQueue({
            runtimes: "html5,flash,silverlight",
            url: $("#uploadSongForm").attr("action"),
            file_data_name: "songfile",
            max_file_size: "100mb",
            unique_names: true,
            headers: {
                "X-CSRFToken": GLOBAL.csrfToken
            },
            rename: true,
            filters: [ {
                title: "Music files",
                extensions: "mp3,mp4,m4a"
            } ],
            flash_swf_url: "/static/js/plupload/plupload.flash.swf",
            silverlight_xap_url: "/static/js/plupload/plupload.silverlight.xap",
            init: {
                Error: function(a, b) {
                    console.log("[error] ", b);
                },
                UploadComplete: function(a, b) {
                    var c = $("#songUploader").pluploadQueue();
                    c.splice();
                    $("#songUploader .plupload_buttons").css("display", "");
                    $("#songUploader .plupload_upload_status").css("display", "");
                },
                FileUploaded: function(b, c, d) {
                    var e = JSON.parse(d.response);
                    if (e.success) {
                        song = new SongModel({
                            id: e.song_id,
                            artist: e.artist,
                            title: e.title,
                            songOrder: e.song_order,
                            songFile: e.song_file
                        });
                        a.songs.collection.add(song);
                    } else {
                        alert("There was an error uploading: " + e.error);
                    }
                }
            }
        });
        $("#uploadSongForm").submit(function(a) {
            var b = $("#songUploader").pluploadQueue();
            if (b.files.length > 0) {
                b.bind("StateChanged", function() {
                    if (b.files.length === b.total.uploaded + b.total.failed) {
                        $("#uploadSongForm")[0].submit();
                    }
                });
                b.start();
            } else {
                alert("You must queue at least one file.");
            }
            return false;
        });
        $("#picUploader").pluploadQueue({
            runtimes: "html5,flash,silverlight",
            url: $("#uploadPictureForm").attr("action"),
            file_data_name: "picfile",
            max_file_size: "10mb",
            unique_names: true,
            headers: {
                "X-CSRFToken": GLOBAL.csrfToken
            },
            dragdrop: false,
            drop_element: "bgDropper",
            resize: {
                width: 2e3,
                height: 2e3,
                quality: 70
            },
            rename: true,
            filters: [ {
                title: "Image files",
                extensions: "jpg,gif,png"
            } ],
            flash_swf_url: "/static/js/plupload/plupload.flash.swf",
            silverlight_xap_url: "/static/js/plupload/plupload.silverlight.xap",
            init: {
                Error: function(a, b) {
                    console.log("[error] ", b);
                },
                FilesAdded: function() {
                    $("#picUploader").pluploadQueue().start();
                },
                UploadComplete: function(a, b) {
                    var c = $("#picUploader").pluploadQueue();
                    c.splice();
                    $("#picUploader .plupload_buttons").css("display", "");
                    $("#picUploader .plupload_upload_status").css("display", "");
                },
                FileUploaded: function(b, c, d) {
                    var e = JSON.parse(d.response);
                    if (e.success) {
                        a.model.set("pictureFile", e.file);
                    } else {
                        alert("There was an error uploading: " + e.error);
                    }
                }
            }
        });
        $("#picUploader_browse").html("Add");
        $("#uploadPictureForm").submit(function(a) {
            var b = $("#picUploader").pluploadQueue();
            if (b.files.length > 0) {
                b.bind("StateChanged", function() {
                    if (b.files.length === b.total.uploaded + b.total.failed) {
                        $("#uploadPictureForm")[0].submit();
                    }
                });
                b.start();
            } else {
                alert("You must queue at least one file.");
            }
            return false;
        });
        this.options.isPublished = this.isPublished = false;
    },
    renderInit: function() {
        $("#mixTitle").html(this.model.attributes.title);
        $("#mixUsername").html("by " + this.model.attributes.username);
        this.renderPictureFile();
        this.songs.collection.trigger("reset");
        if (this.options.isPublished) {
            var a = this.songs.collection.findWhere({
                songOrder: 1
            });
            this.playSong(a, false);
        }
        var b = this;
        this.songs.$el.on("change", ".favourite-checkbox", function() {
            $item = $(this).parent();
            var a = b.songs.collection.get($item.attr("id").replace("song_", ""));
            a.set("isUserFav", this.checked);
            a.save(a.changed, {
                patch: true
            });
        });
        if (this.options.isUserMix) {
            $("#unpublishMixLink").on("click", function() {
                b.model.set("isPublished", false);
                b.model.save(b.model.changed, {
                    patch: true
                });
            });
        }
        $("#btnAddComment").on("click", function() {
            var a = $("#txtAddComment").val().trim();
            if (a == "") return;
            var c = new Date();
            var d = new CommentModel({
                username: b.model.get("username"),
                date: c.getFullYear() + "-" + (c.getMonth() + 1) + "-" + c.getDate(),
                text: a,
                mixId: b.model.get("id")
            });
            d.save();
            b.comments.collection.add(d);
            $("#txtAddComment").val("");
        });
        if (this.options.isUserMix) {
            $("body").addClass("admin");
            if (!this.options.isPublished) {
                this.setUnpublished();
            }
        }
        EventDispatcher.addEventListener("songEnded", function() {
            b.songEndedHandler();
        });
        return this;
    },
    renderPictureFile: function() {
        if (this.model.attributes.pictureFile != "") {
            $("#mainWrapper").css("background-image", "url(" + this.model.attributes.pictureFile + ")");
            $("#removeBG").css("display", "");
        } else {
            $("#mainWrapper").css("background-image", "");
            $("#removeBG").css("display", "none");
        }
    },
    renderPublished: function() {
        if (this.model.attributes.isPublished) {
            this.setPublished();
        } else {
            this.setUnpublished();
        }
    }
});

var SongCollectionView = Backbone.View.extend({
    songViews: [],
    initialize: function() {
        var a = this;
        this.listenTo(this.collection, "reset", this.renderReset);
        this.listenTo(this.collection, "changeSongOrder", this.onChangeOrder);
        this.listenTo(this.collection, "destroy", this.reorderSongs);
        this.listenTo(this.collection, "add", this.addSong);
        this.songViews = [];
        this.collection.each(function(b) {
            a.songViews.push(new SongView({
                model: b,
                songCollectionView: a
            }));
        });
    },
    addSong: function(a) {
        var b = new SongView({
            model: a,
            songCollectionView: this
        });
        this.songViews.push(b);
        this.$el.append(b.render().$el);
    },
    editSong: function(a, b, c) {
        this.collection.each(function(d) {
            if (d.attributes.id == a) {
                d.set(b, c);
            }
        });
    },
    renderReset: function() {
        var a = this;
        this.$el.empty();
        _(this.songViews).each(function(b) {
            a.$el.append(b.render().$el);
        });
        return this;
    },
    reorderSongs: function() {
        var a;
        var b = 1;
        var c;
        var d = this;
        $(".song-item", this.$el).each(function() {
            a = $(this);
            if (a.attr("data-order") != b) {
                c = d.collection.get(a.attr("id").replace("song_", ""));
                c.set("songOrder", b);
            }
            b++;
        });
        this.collection.trigger("changeSongOrder");
    },
    onChangeOrder: function() {
        this.collection.updateSongOrder();
    },
    removeView: function(a) {
        var b = _(this.songViews).indexOf(a);
        this.songViews.splice(b, 1);
    }
});

var SongView = Backbone.View.extend({
    initialize: function() {
        this.listenTo(this.model, "change:title", this.onChange);
        this.listenTo(this.model, "change:artist", this.onChange);
        this.listenTo(this.model, "change:songOrder", this.renderSongOrder);
        this.listenTo(this.model, "change:totalFav", this.renderTotalFav);
        this.listenTo(this.model, "destroy", this.onDestroy);
        this.id = "song_" + this.model.attributes.id;
    },
    render: function() {
        var a = $("#tmpSongItem").clone();
        a.attr("id", this.id).attr("data-order", this.model.songOrder);
        $(".song-title", a).html(this.model.attributes.title).attr("data-id", this.model.attributes.id);
        $(".song-artist", a).html(this.model.attributes.artist).attr("data-id", this.model.attributes.id);
        $(".song-order", a).html(this.model.attributes.songOrder);
        $(".total-favourite", a).html(this.model.attributes.totalFav + " favs");
        $(".favourite-checkbox", a)[0].checked = this.model.attributes.isUserFav;
        this.$el = a;
        return this;
    },
    onChange: function() {
        this.model.save(this.model.changed, {
            patch: true
        });
    },
    renderSongOrder: function() {
        $(".song-order", this.$el).html(this.model.attributes.songOrder);
    },
    renderTotalFav: function() {
        $(".total-favourite", this.$el).html(this.model.attributes.totalFav + " favs");
    },
    onDestroy: function(a) {
        this.remove();
        this.options.songCollectionView.removeView(this);
    }
});

var CommentCollectionView = Backbone.View.extend({
    initialize: function() {
        var a = this;
        this.listenTo(this.collection, "add", this.addComment);
    },
    addComment: function(a) {
        var b = new CommentView({
            model: a
        });
        b.render();
        this.$el.prepend(b.$el);
    }
});

var CommentView = Backbone.View.extend({
    initialize: function() {
        this.render();
    },
    render: function() {
        var a = $("#tmpCommentItem").clone();
        a.attr("id", "");
        $(".username", a).html(this.model.attributes.username);
        $(".date", a).html(this.model.attributes.date);
        $(".text", a).html(this.model.attributes.text.replace(/\n/g, "<br>"));
        this.$el = a;
        return this;
    }
});

var GLOBAL = {
    csrfToken: ""
};

function csrfSafeMethod(a) {
    return /^(GET|HEAD|OPTIONS|TRACE)$/.test(a);
}

var Modal = {
    $modalWrapper: false,
    open: function(a, b) {
        if (this.$modalWrapper) {
            Modal.close();
        }
        var c = this;
        if (typeof b == "undefined") {
            b = false;
        }
        this.$modalWrapper = $("#modalWrapper");
        this.$modalWrapper.css("display", "table");
        $("td", this.$modalWrapper).html('<div class="loading">Loading ...</div>').load(a, function() {
            if (b) {
                c.$modalWrapper.on("click", "a", b);
            }
        });
    },
    close: function() {
        if (!this.$modalWrapper) return;
        $("td", this.$modalWrapper).html("");
        this.$modalWrapper.css("display", "").off("click");
        this.$modalWrapper = false;
    }
};

var AudioPlayer = {
    $audioPlayer: false,
    $container: false,
    isReady: false,
    readySong: false,
    readyPlay: false,
    init: function() {
        var a = this;
        this.$audioPlayer = $("#jquery_jplayer_1");
        this.$container = $("#jp_container_1");
        this.$audioPlayer.jPlayer({
            ready: function() {
                a.isReady = true;
                if (a.readySong) {
                    AudioPlayer.play(a.readySong, a.readyPlay);
                }
            },
            ended: function() {
                EventDispatcher.dispatchEvent("songEnded");
            },
            pause: function() {
                EventDispatcher.dispatchEvent("songStop");
            },
            preload: "auto",
            swfPath: "/js",
            supplied: "mp3,m4a"
        });
        EventDispatcher.addEventListener("songPlay", function(b) {
            a.play(b.song, b.autoPlay);
        });
    },
    play: function(a, b) {
        if (typeof b == "undefined") {
            b = true;
        }
        if (!this.isReady) {
            this.readySong = a;
            this.readyPlay = b;
            return;
        }
        var c = a.attributes.songFile;
        var d = c.substr(c.lastIndexOf(".") + 1);
        var e = {};
        e[d] = c;
        this.$audioPlayer.jPlayer("setMedia", e);
        if (b) {
            this.$audioPlayer.jPlayer("play");
        }
        $(".jp-title", this.$container).html(a.attributes.title);
        this.readySong = false;
    }
};

var Mix = {
    view: false,
    init: function(a) {
        this.view = new MixView({
            model: new MixModel(a),
            el: $("#mix")[0],
            id: a.id,
            isUserMix: a.isUserMix,
            isPublished: a.isPublished,
            pictureFile: a.pictureFile
        });
        AudioPlayer.init();
        this.view.renderInit();
    }
};

var Home = {
    waiting: false,
    init: function() {
        var a = this;
        $("#makeNewMixLink").on("click", function() {
            if (a.waiting) return;
            a.waiting = true;
            $.post($(this).attr("data-url"), {}, function(b) {
                if (b.success && b.id) {
                    window.location = "/mix/" + b.id;
                }
                a.waiting = false;
            });
            setTimeout(function() {
                a.waiting = false;
            });
        });
        $(".my-mixes-table").on("click", ".delete-mix-link", function() {
            var a = $(this);
            if (!confirm("Are you sure you want to delete " + $("#myMix_" + a.attr("data-id")).html() + "?")) return;
            $.post(a.attr("data-url"), {
                id: a.attr("data-id")
            });
            $("#myMixItem_" + a.attr("data-id")).remove();
        });
    }
};

var App = {
    init: function(a) {
        GLOBAL.csrfToken = Cookie.get("csrftoken");
        $.ajaxSetup({
            crossDomain: false,
            beforeSend: function(a, b) {
                if (!csrfSafeMethod(b.type)) {
                    a.setRequestHeader("X-CSRFToken", GLOBAL.csrfToken);
                }
            }
        });
        $.fn.editable.defaults.mode = "inline";
        var b = Backbone.sync;
        Backbone.sync = function(a, c, d) {
            d.beforeSend = function(a) {
                a.setRequestHeader("X-CSRFToken", GLOBAL.csrfToken);
            };
            return b(a, c, d);
        };
        Backbone.emulateHTTP = true;
        switch (a.page) {
          case "home":
            Home.init();
            break;

          case "mix":
            Mix.init(a);
            break;
        }
    }
};