var Song = Backbone.Model.extend({
    defaults: {
        artist: "Unknown",
        title: "Untitled",
        isUserFav: false,
        totalFav: 0,
        songOrder: 1
    },
    initialize: function() {
        this.urlRoot = "/mix/" + this.attributes.mixId + "/song/";
    }
});

var Songs = Backbone.Collection.extend({
    model: Song,
    url: "",
    comparator: function(a) {
        return a.get("songOrder");
    },
    updateSongOrder: function() {
        Backbone.sync("update", this, {});
    }
});

var Mix = Backbone.Model.extend({
    urlRoot: "/mix",
    url: function() {
        var a = Backbone.Model.prototype.url.call(this);
        return a + (a.charAt(a.length - 1) == "/" ? "" : "/");
    },
    defaults: {
        title: "Mix Title",
        username: "Dude",
        isUserMix: false,
        pictureFile: "",
        songs: [],
        comments: []
    },
    initialize: function() {
        this.songs = new Songs(this.attributes.songs);
        this.songs.url = this.url() + "update_song_order/";
    }
});

var MixView = Backbone.View.extend({
    isPublished: true,
    initialize: function() {
        this.listenTo(this.model, "change:title", this.onChange);
        this.songs = new SongCollectionView({
            collection: this.model.songs,
            el: $(".song-list", this.el)[0]
        });
        this.songs.collection.trigger("reset");
    },
    onChange: function(a, b) {
        this.model.save(this.model.changed, {
            patch: true
        });
    },
    setUnpublished: function() {
        if (!this.isPublished) return;
        var a = this;
        $("body").addClass("unpublished");
        $("#mixTitle").editable({
            type: "text",
            showbuttons: false,
            title: "Enter title",
            inputclass: "mix-title"
        }).on("save", function(b, c) {
            a.model.set("title", c.newValue);
        });
        $("#resetSongUploadQueue").click(function() {
            var a = $("#songUploader").pluploadQueue();
            a.splice();
            $("#songUploader .plupload_buttons").css("display", "");
            $("#songUploader .plupload_upload_status").css("display", "");
            return false;
        });
        $("#songUploader").pluploadQueue({
            runtimes: "html5,flash,silverlight",
            url: $("#uploadSongForm").attr("action"),
            file_data_name: "songfile",
            max_file_size: "100mb",
            unique_names: true,
            headers: {
                "X-CSRFToken": GLOBAL.csrfToken
            },
            rename: true,
            filters: [ {
                title: "Music files",
                extensions: "mp3,mp4,m4a"
            } ],
            flash_swf_url: "/static/js/plupload/plupload.flash.swf",
            silverlight_xap_url: "/static/js/plupload/plupload.silverlight.xap",
            init: {
                Error: function(a, b) {
                    console.log("[error] ", b);
                },
                UploadComplete: function(a) {
                    console.log("[UploadComplete]", a);
                }
            }
        });
        $("#uploadSongForm").submit(function(a) {
            var b = $("#songUploader").pluploadQueue();
            if (b.files.length > 0) {
                b.bind("StateChanged", function() {
                    if (b.files.length === b.total.uploaded + b.total.failed) {
                        $("#uploadSongForm")[0].submit();
                    }
                });
                b.start();
            } else {
                alert("You must queue at least one file.");
            }
            return false;
        });
        this.options.isPublished = this.isPublished = false;
    },
    render: function() {
        console.log("rendering mix");
        $("#mixTitle").html(this.model.attributes.title);
        $("#mixUsername").html("by " + this.model.attributes.username);
        if (this.options.isUserMix) {
            $("body").addClass("admin");
            if (!this.options.isPublished) {
                this.setUnpublished();
            }
        }
        return this;
    }
});

var SongCollectionView = Backbone.View.extend({
    changed: [],
    initialize: function() {
        var a = this;
        this.listenTo(this.collection, "reset", this.renderReset);
        this.listenTo(this.collection, "changeSongOrder", this.onChangeOrder);
        this.songViews = [];
        this.collection.each(function(b) {
            a.songViews.push(new SongView({
                model: b,
                id: "song_" + b.attributes.id
            }));
        });
    },
    renderReset: function() {
        console.log("collection reset");
        var a = this;
        this.$el.empty();
        _(this.songViews).each(function(b) {
            a.$el.append(b.render().$el);
        });
        this.$el.sortable({
            update: function(b, c) {
                a.changed = [];
                var d;
                var e = 1;
                var f;
                $(".song-item", a.$el).each(function() {
                    d = $(this);
                    if (d.attr("data-order") != e) {
                        f = a.collection.get(d.attr("id").replace("song_", ""));
                        f.set("songOrder", e);
                        a.changed.push(f);
                    }
                    e++;
                });
                a.collection.trigger("changeSongOrder");
            }
        });
        return this;
    },
    onChangeOrder: function() {
        console.log("change order");
        this.collection.updateSongOrder();
    }
});

var SongView = Backbone.View.extend({
    initialize: function() {
        this.listenTo(this.model, "change:title", this.renderTitle);
        this.listenTo(this.model, "change:songOrder", this.renderSongOrder);
    },
    render: function() {
        console.log("render songview");
        var a = $("#tmpSongItem").clone();
        a.attr("id", this.id).attr("data-order", this.model.songOrder);
        $(".song-title", a).html(this.model.attributes.title);
        $(".song-artist", a).html(this.model.attributes.artist);
        $(".song-order", a).html(this.model.attributes.songOrder);
        this.$el = a;
        return this;
    },
    renderTitle: function() {
        console.log("render title");
        $(".song-title", this.$el).html(this.model.attributes.title);
    },
    renderSongOrder: function() {
        console.log("render song order");
        $(".song-order", this.$el).html(this.model.attributes.songOrder);
    }
});

var CommentView = Backbone.View.extend({
    render: function() {}
});

var GLOBAL = {
    csrfToken: ""
};

function csrfSafeMethod(a) {
    return /^(GET|HEAD|OPTIONS|TRACE)$/.test(a);
}

var App = {
    init: function(a) {
        GLOBAL.csrfToken = Cookie.get("csrftoken");
        $.ajaxSetup({
            crossDomain: false,
            beforeSend: function(a, b) {
                if (!csrfSafeMethod(b.type)) {
                    a.setRequestHeader("X-CSRFToken", GLOBAL.csrfToken);
                }
            }
        });
        $.fn.editable.defaults.mode = "inline";
        var b = Backbone.sync;
        Backbone.sync = function(a, c, d) {
            d.beforeSend = function(a) {
                a.setRequestHeader("X-CSRFToken", GLOBAL.csrfToken);
            };
            return b(a, c, d);
        };
        Backbone.emulateHTTP = true;
        this.mixView = new MixView({
            model: new Mix(a),
            el: $("#mix")[0],
            id: a.id,
            isUserMix: a.isUserMix,
            isPublished: a.isPublished
        }).render();
        $("#picUploader").pluploadQueue({
            runtimes: "html5,flash,silverlight",
            url: $("#uploadPictureForm").attr("action"),
            file_data_name: "picfile",
            max_file_size: "10mb",
            unique_names: true,
            headers: {
                "X-CSRFToken": GLOBAL.csrfToken
            },
            resize: {
                width: 2e3,
                height: 2e3,
                quality: 70
            },
            rename: true,
            filters: [ {
                title: "Image files",
                extensions: "jpg,gif,png"
            } ],
            flash_swf_url: "/static/js/plupload/plupload.flash.swf",
            silverlight_xap_url: "/static/js/plupload/plupload.silverlight.xap"
        });
        $("#uploadPictureForm").submit(function(a) {
            var b = $("#picUploader").pluploadQueue();
            if (b.files.length > 0) {
                b.bind("StateChanged", function() {
                    if (b.files.length === b.total.uploaded + b.total.failed) {
                        $("#uploadPictureForm")[0].submit();
                    }
                });
                b.start();
            } else {
                alert("You must queue at least one file.");
            }
            return false;
        });
    }
};