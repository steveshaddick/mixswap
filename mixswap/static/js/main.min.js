var Main = function() {}();

var mix;

function Mix(_mixId, _isMyMix, _isPublished, _bgImage) {
    var me = this;
    var mixTitle;
    var audioPlayer;
    var comments;
    var currentTrack;
    var currentSong;
    var songs = Array();
    var dragSource = false;
    var dragTarget = false;
    var isMyMix = _isMyMix;
    var isPublished = _isPublished;
    var filetype = "mp3";
    var mixFolder = "<?=$mixFolder?>";
    var isEditable;
    var modal;
    this.mixId = _mixId;
    this.elements = Array();
    function changeTitle() {
        var e;
        var t = prompt("Enter new title", me.elements["mixTitle"].innerHTML);
        if (t != null && t != "") {
            e = new AJAX("<?=PHP_CHANGE_TITLE?>", {
                mixId: me.mixId,
                newTitle: t
            });
            e.send();
            me.elements["mixTitle"].innerHTML = t;
        }
    }
    function togglePublish() {
        var e;
        isPublished = !isPublished;
        var t = "false";
        if (isPublished) {
            t = prompt("Do you want to send an email to everyone?  Enter 'y' if yes.");
            t = t.toLowerCase();
            t = t == "y" ? "true" : "false";
        }
        e = new AJAX("<?=PHP_PUBLISH_MIX?>", {
            mixId: me.mixId,
            isPublished: isPublished ? 1 : 0,
            isEmail: t
        });
        e.send();
        if (isPublished) {
            me.elements["publishSection"].className = "published";
            me.elements["publishMix"].innerHTML = "Unpublish";
        } else {
            me.elements["publishSection"].className = "unpublished";
            me.elements["publishMix"].innerHTML = "Publish";
        }
        setEditable();
    }
    function setEditable() {
        isEditable = isMyMix && !isPublished;
        if (isEditable) {
            me.elements["mixTitle"].onclick = changeTitle;
            me.elements["addTrack"].style.display = "block";
            me.elements["changeBG"].style.display = "block";
            me.elements["commentsSection"].style.display = "none";
            document.getElementById("btnUploadSong").onclick = uploadSong;
            document.getElementById("btnUploadBG").onclick = uploadBG;
            for (var e = 0, t = songs.length; e < t; e++) {
                songs[e].setEditable(true);
                songs[e].element.addEventListener("dragstart", dragStart, false);
                songs[e].element.addEventListener("dragenter", dragEnter, false);
                songs[e].element.addEventListener("dragover", dragOver, false);
                songs[e].element.addEventListener("dragleave", dragLeave, false);
                songs[e].element.addEventListener("drop", dragDrop, false);
                songs[e].elements["deleteLink"].onclick = deleteSong;
                songs[e].elements["editLink"].onclick = editSong;
            }
        } else {
            me.elements["mixTitle"].onclick = null;
            me.elements["addTrack"].style.display = "none";
            me.elements["changeBG"].style.display = "none";
            me.elements["commentsSection"].style.display = "block";
            document.getElementById("btnUploadSong").onclick = null;
            document.getElementById("btnUploadBG").onclick = null;
            for (var e = 0, t = songs.length; e < t; e++) {
                songs[e].setEditable(false);
                songs[e].element.removeEventListener("dragstart", dragStart, false);
                songs[e].element.removeEventListener("dragenter", dragEnter, false);
                songs[e].element.removeEventListener("dragover", dragOver, false);
                songs[e].element.removeEventListener("dragleave", dragLeave, false);
                songs[e].element.removeEventListener("drop", dragDrop, false);
                songs[e].elements["deleteLink"].onclick = null;
                songs[e].elements["editLink"].onclick = null;
            }
        }
    }
    function listSongs() {
        var e = false;
        var t = me.elements["songList"];
        for (var n = 0, s = songs.length; n < s; n++) {
            if (typeof t.childNodes[n] != "undefined") {
                if (t.childNodes[n] != songs[n].element) {
                    t.replaceChild(songs[n].element, t.childNodes[n]);
                }
            } else {
                t.appendChild(songs[n].element);
            }
            songs[n].setIndex(n);
        }
        while (t.childNodes.length > songs.length) {
            t.removeChild(t.lastChild);
        }
    }
    function deleteSong() {
        var e = songs[parseInt(this.parentNode.parentNode.getAttribute("data-index"))];
        if (confirm("Delete " + e.title + " by " + e.artist + "?")) {
            var t = new AJAX("<?=PHP_DELETE_SONG?>", {
                mixId: me.mixId,
                songId: e.songId,
                songIndex: e.index
            }, deleteSongHandler);
            t.send();
        }
    }
    function editSong() {
        var e = songs[parseInt(this.parentNode.parentNode.getAttribute("data-index"))];
        var t = e.title;
        var n = e.artist;
        var s = prompt("Enter new title", e.title);
        if (s == null) {
            return;
        }
        if (s == t) {
            s = "";
        }
        var i = prompt("Enter new artist", e.artist);
        if (i == null) {
            return;
        }
        if (i == n) {
            i = "";
        }
        if (s != "" || i != "") {
            var a = new AJAX("<?=PHP_EDIT_SONG?>", {
                mixId: me.mixId,
                songId: e.songId,
                title: s,
                artist: i
            });
            a.send();
        }
        if (s != "") {
            this.parentNode.parentNode.getElementsByClassName("songTitle")[0].innerHTML = s;
        }
        if (i != "") {
            this.parentNode.parentNode.getElementsByClassName("songArtist")[0].innerHTML = i;
        }
    }
    function editSongHandler(e) {
        console.log(e);
    }
    function deleteSongHandler(req) {
        var obj = eval("(" + req.responseText + ")");
        var songIndex = parseInt(obj.songIndex);
        removeSong(songIndex);
    }
    function removeSong(e) {
        songs.splice(e, 1);
        listSongs();
    }
    function playSong(e) {
        if (typeof currentSong != "undefined") {
            currentSong.setPlaying(false);
        }
        currentTrack = e.index;
        audioPlayer.playSong(e);
        currentSong = e;
        e.setPlaying(true);
    }
    function playHandler() {
        currentSong = songs[currentTrack];
        currentSong.setPlaying(true);
    }
    function pauseHandler() {
        currentSong.setPlaying(false);
    }
    function playNextTrack() {
        currentTrack = currentTrack < songs.length - 1 ? currentTrack + 1 : 0;
        if (currentTrack > 0) {
            playSong(songs[currentTrack]);
        }
    }
    function uploadSong() {
        modal = new Modal("Uploading song...");
        document.getElementById("frmUploadSong").submit();
    }
    function uploadBG() {
        modal = new Modal("Uploading image...");
        document.getElementById("frmUploadBG").submit();
    }
    function setBG(e) {
        document.body.style.backgroundImage = "url(" + mixFolder + e + ")";
    }
    function dragStart(e) {
        e.stopPropagation();
        dragSource = this;
        dragSource.addEventListener("dragend", dragEnd, false);
        g.addClassName(dragSource, "dragged");
        e.dataTransfer.effectAllowed = "move";
        e.dataTransfer.setDragImage(dragSource, 0, 0);
        return true;
    }
    function dragEnter(e) {
        if (dragTarget) {
            g.removeClassName(dragTarget, "dragOver");
            dragTarget = false;
        }
        if (dragSource != this) {
            dragTarget = this;
            g.addClassName(dragTarget, "dragOver");
            e.dataTransfer.dropEffect = "move";
        }
        return false;
    }
    function dragOver(e) {
        e.stopPropagation();
        e.preventDefault();
        return false;
    }
    function dragLeave(e) {
        if (dragTarget && dragTarget != this) {
            g.removeClassName(dragTarget, "dragOver");
        }
    }
    function dragEnd(e) {
        if (dragTarget) {
            g.removeClassName(dragTarget, "dragOver");
            dragTarget = false;
        }
        if (dragSource) {
            g.removeClassName(dragSource, "dragged");
            dragSource.removeEventListener("dragend", dragEnd, false);
            dragSource = false;
        }
    }
    function dragDrop(e) {
        console.log(dragTarget, "DROP");
        e.stopPropagation();
        g.removeClassName(dragSource, "dragged");
        if (dragTarget) {
            g.removeClassName(dragTarget, "dragOver");
            if (dragSource != e.target) {
                var t = parseInt(dragSource.getAttribute("data-index"));
                var n = parseInt(dragTarget.getAttribute("data-index"));
                if (n > t) {
                    songs.splice(n + 1, 0, songs[t]);
                    songs.splice(t, 1);
                } else {
                    songs.splice(n, 0, songs[t]);
                    songs.splice(t + 1, 1);
                }
                listSongs();
            }
        }
        return false;
    }
    this.addSong = function(e, t, n, s, i, a) {
        if (t == "") {
            t = "[unartisted]";
        }
        if (n == "") {
            n = "[untitled]";
        }
        var l = new SongItem(e, songs.length, t, n, s, i, a, isEditable);
        songs.push(l);
        this.elements["songList"].appendChild(l.element);
        if (isEditable) {
            l.element.addEventListener("dragstart", dragStart, false);
            l.element.addEventListener("dragenter", dragEnter, false);
            l.element.addEventListener("dragover", dragOver, false);
            l.element.addEventListener("dragleave", dragLeave, false);
            l.element.addEventListener("drop", dragDrop, false);
        }
        l.elements["songLink"].onclick = function(e) {
            playSong(l);
        };
        if (isEditable) {
            l.elements["deleteLink"].onclick = deleteSong;
            l.elements["editLink"].onclick = editSong;
        }
        listSongs();
    };
    this.addComment = function(e, t, n) {
        comments.addComment(new CommentItem(e, t, n));
    };
    this.uploadSongDone = function(e, t, n, s) {
        this.addSong(e, t, n, s, false, 0);
        document.getElementById("frmUploadSong").reset();
        modal.closeModal();
    };
    this.uploadBGDone = function(e) {
        setBG(e);
        document.getElementById("frmUploadBG").reset();
        modal.closeModal();
    };
    this.elements["mixTitle"] = document.getElementById("mixTitle");
    this.elements["songList"] = document.getElementById("songList");
    this.elements["commentsSection"] = document.getElementById("scnComments");
    currentTrack = 0;
    audioPlayer = new AudioPlayer();
    audioPlayer.elements["audioElement"].addEventListener("ended", playNextTrack, false);
    audioPlayer.elements["audioElement"].addEventListener("play", playHandler, false);
    audioPlayer.elements["audioElement"].addEventListener("pause", pauseHandler, false);
    if (!isMyMix) {
        g.removeElementById("scnPublishMix");
        g.removeElementById("scnAddTrack");
        g.removeElementById("scnChangeBG");
    } else {
        this.elements["publishMix"] = document.getElementById("aPublishMix");
        this.elements["publishSection"] = document.getElementById("scnPublishMix");
        this.elements["addTrack"] = document.getElementById("scnAddTrack");
        this.elements["changeBG"] = document.getElementById("scnChangeBG");
        this.elements["publishMix"].onclick = togglePublish;
        document.getElementById("scnPublishMix").style.display = "block";
        if (isPublished) {
            me.elements["publishSection"].className = "published";
            this.elements["publishMix"].innerHTML = "Unpublish";
        } else {
            me.elements["publishSection"].className = "unpublished";
            this.elements["publishMix"].innerHTML = "Publish";
        }
        setEditable();
    }
    comments = new Comments();
    setBG(_bgImage);
}

function AudioPlayer() {
    var e = "<?=$songsFolder?>";
    this.element = document.getElementById("scnAudioPlayer");
    this.elements = Array();
    this.elements["audioElement"] = document.getElementById("audioElement");
    this.elements["currentTitle"] = document.getElementById("currentTitle");
    this.elements["currentArtist"] = document.getElementById("currentArtist");
    this.playSong = function(t) {
        this.elements["currentTitle"].innerHTML = t.title;
        this.elements["currentArtist"].innerHTML = t.artist;
        this.elements["audioElement"].src = e + t.file;
        this.elements["audioElement"].setAttribute("autoplay", "autoplay");
        this.elements["audioElement"].load();
    };
}

function SongItem(_songId, _index, _artist, _title, _file, _isMyFavourite, _favCount, _isEditable) {
    var me = this;
    var favCount = _favCount;
    this.songId = _songId;
    this.element = document.getElementById("refSongItem").cloneNode(true);
    this.elements = Array();
    this.elements["hitDrag"] = this.element.getElementsByClassName("hitDrag")[0];
    this.elements["chkFav"] = this.element.getElementsByClassName("chkFavourite")[0];
    this.elements["divFav"] = this.element.getElementsByClassName("divFavourite")[0];
    this.elements["songLink"] = this.element.getElementsByClassName("songLink")[0];
    this.elements["divDrag"] = this.element.getElementsByClassName("divDrag")[0];
    this.elements["deleteLink"] = this.element.getElementsByClassName("songDeleteLink")[0];
    this.elements["editLink"] = this.element.getElementsByClassName("songEditLink")[0];
    this.elements["song"] = this.element.getElementsByClassName("divSong")[0];
    this.elements["trackNumber"] = this.element.getElementsByClassName("songTrack")[0];
    this.elements["artist"] = this.element.getElementsByClassName("songArtist")[0];
    this.elements["title"] = this.element.getElementsByClassName("songTitle")[0];
    this.elements["favCount"] = this.element.getElementsByClassName("favCount")[0];
    this.artist = _artist;
    this.title = _title;
    this.index = _index;
    this.file = _file;
    function chkFavHandler() {
        var e = me.elements["chkFav"].checked ? 1 : 0;
        var t = new AJAX("<?=PHP_FAV_SONG?>", {
            mixId: mix.mixId,
            songId: me.songId,
            isFavourite: e
        }, favSongHandler);
        t.send();
    }
    function favSongHandler(req) {
        var obj = eval("(" + req.responseText + ")");
        favCount = parseInt(obj.favCount);
        setFavCount();
    }
    function setFavCount() {
        me.elements["favCount"].innerHTML = favCount + " favs";
    }
    this.setIndex = function(e) {
        var t = this.index;
        if (t != e) {
            this.index = e;
            this.element.setAttribute("id", "songItem_" + e);
            this.element.setAttribute("data-index", this.index);
            this.elements["trackNumber"].innerHTML = e + 1;
            var n = new AJAX("<?=PHP_SONG_INDEX?>", {
                songOrder: this.index,
                songId: this.songId
            });
            n.send();
        }
    };
    this.setEditable = function(e) {
        if (e) {
            this.elements["hitDrag"].style.display = "inline";
            this.elements["deleteLink"].style.display = "inline";
            this.elements["editLink"].style.display = "inline";
            this.elements["divFav"].style.display = "none";
            this.elements["divDrag"].style.display = "inline-block";
            this.element.setAttribute("draggable", "true");
        } else {
            this.elements["hitDrag"].style.display = "none";
            this.elements["deleteLink"].style.display = "none";
            this.elements["editLink"].style.display = "none";
            this.elements["divFav"].style.display = "inline";
            this.element.setAttribute("draggable", "false");
            this.elements["divDrag"].style.display = "none";
        }
    };
    this.setPlaying = function(e) {
        if (e) {
            g.addClassName(this.elements["song"], "songPlaying");
        } else {
            g.removeClassName(this.elements["song"], "songPlaying");
        }
    };
    this.element.setAttribute("id", "songItem_" + this.index);
    this.element.setAttribute("data-index", this.index);
    this.elements["chkFav"].onclick = chkFavHandler;
    if (_isMyFavourite) {
        this.elements["chkFav"].checked = true;
    }
    this.setEditable(_isEditable);
    this.elements["trackNumber"].innerHTML = this.index + 1;
    this.elements["artist"].innerHTML = this.artist;
    this.elements["title"].innerHTML = this.title;
    setFavCount();
}

function Comments() {
    var e = this;
    this.element = document.getElementById("scnComments");
    this.elements = Array();
    this.elements["commentsList"] = document.getElementById("divCommentsList");
    this.elements["txtAddComment"] = document.getElementById("txtAddComment");
    this.elements["btnAddComment"] = document.getElementById("btnAddComment");
    function t() {
        for (var e = 0, t = coments.length; e < t; e++) {}
    }
    function n() {
        var t = new AJAX("<?=PHP_ADD_COMMENT?>", {
            mixId: mix.mixId,
            comment: escape(e.elements["txtAddComment"].value)
        }, s);
        t.send();
    }
    function s(t) {
        var n = new Date();
        e.addComment(new CommentItem("<?=$displayName?>", n.toDateString(), e.elements["txtAddComment"].value));
        e.elements["txtAddComment"].value = "";
    }
    this.addComment = function(e) {
        this.elements["commentsList"].insertBefore(e.element, this.elements["commentsList"].firstChild);
    };
    this.elements["btnAddComment"].onclick = n;
}

function CommentItem(e, t, n) {
    var s = this;
    var i = new Date(t);
    this.element = document.getElementById("refCommentItem").cloneNode(true);
    this.element.removeAttribute("id");
    this.elements = Array();
    this.elements["userName"] = this.element.getElementsByClassName("commentUserName")[0];
    this.elements["time"] = this.element.getElementsByClassName("commentTime")[0];
    this.elements["text"] = this.element.getElementsByClassName("commentText")[0];
    this.elements["userName"].innerHTML = e;
    this.elements["time"].setAttribute("datetime", i.toString());
    this.elements["time"].innerHTML = i.toDateString();
    this.elements["text"].innerHTML = n;
}

function handleOrientationChange() {
    switch (window.orientation) {
      case 0:
        break;

      case -90:
        break;

      case 90:
        break;

      case 180:
        break;
    }
}